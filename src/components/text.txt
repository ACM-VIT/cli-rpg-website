const initialText = `use crossterm::{
    cursor,
    event::{self, KeyCode},
    execute,
    terminal::{self, ClearType},
};
use std::io::{self, Write};

const HOUSE_MAP: [&str; 32] = [
    "        /////==============/////",
    "       /                        \\",
    "  ====/                          \\===///====///=",
    "  ||--|                           :_||  Garden //",
    "  ||c :       Master              |__|   Tub   |",
    "  ||l :        Bedroom            :  \\________///",
    "  ||o :                           :__        |O|",
    "  ||s :                           |  |       | |",
    "  ||e :                           |__|_      |O|",
    "  ||t :                           |Show|    ===|",
    "  ||--|                           | er |   ( )||",
    "  |======================.... ....|============|_____",
    "  |                                  front _\\ # | | |",
    "  /   Secret Room                    door  / # | | |",
    "  /    _______                       =======# | | |",
    "  /   |       |                             \\| | |",
    "  /   |_______|  Living room                \\|---- ________",
    "  |                                               |",
    "  |                                     Dining    | 2 - Car",
    "  |                                      Room     | Garage",
    "  /                                               |",
    "  /                                               |",
    "  |=====================                          |",
    "  | T  |---|_0_|___|            ==================|_____",
    "  | u  |( )        :           ||wash & dry |__|0|| | |",
    "  | b  |           :           ||____|(__)|       : | |",
    "  |====|============|....|     :                  :_|_|___",
    "  |                      |     ===================|___   laundry",
    "  |                      |                    ||  |\\",
    "  /       Guest          |      ---------     || _ \\  <<== double",
    "                                                                  ",
    "                                                                  "
];

struct Position {
    x: usize,
    y: usize,
}

impl Position {
    fn new(x: usize, y: usize) -> Self {
        Position { x, y }
    }
}

fn draw_map<W: Write>(stdout: &mut W, pos: &Position, secret_room_visible: bool, box_visible: bool) {
    execute!(stdout, terminal::Clear(ClearType::All)).unwrap();
    for (y, line) in HOUSE_MAP.iter().enumerate() {
        for (x, ch) in line.chars().enumerate() {
            if pos.x == x && pos.y == y {
                print!("Q");
            } else if (y >= 12 && y <= 16 && x >= 5 && x <= 16) && !secret_room_visible {
                print!(" ");
            } else if (y == 12 && x == 21) && !box_visible {
                print!(" ");
            } else {
                print!("{}", ch);
            }
        }
        println!();
    }
    stdout.flush().unwrap();
}

fn move_position(pos: &mut Position, dx: isize, dy: isize) {
    let new_x = (pos.x as isize + dx) as usize;
    let new_y = (pos.y as isize + dy) as usize;

    if new_y < HOUSE_MAP.len() && new_x < HOUSE_MAP[new_y].len() {
        let next_char = HOUSE_MAP[new_y].chars().nth(new_x).unwrap();
        if next_char == ' ' || next_char == '_' || next_char == '.' || next_char==':'{
            pos.x = new_x;
            pos.y = new_y;
        }
    }
}

fn main() {
    let mut stdout = io::stdout();
    terminal::enable_raw_mode().unwrap();
    let mut pos = Position::new(1, 1);

    let mut secret_room_visible = false;
    let mut box_visible = false;

    draw_map(&mut stdout, &pos, secret_room_visible, box_visible);

    loop {
        if event::poll(std::time::Duration::from_millis(50)).unwrap() {
            if let event::Event::Key(key_event) = event::read().unwrap() {
                match key_event.code {
                    KeyCode::Char('q') => break,
                    KeyCode::Up => move_position(&mut pos, 0, -1),
                    KeyCode::Down => move_position(&mut pos, 0, 1),
                    KeyCode::Left => move_position(&mut pos, -1, 0),
                    KeyCode::Right => move_position(&mut pos, 1, 0),
                    _ => {}
                }

                if pos.y >= 12 && pos.y <= 16 && pos.x >= 5 && pos.x <= 16 {
                    secret_room_visible = true;
                }

                if pos.y == 12 && pos.x == 21 {
                    box_visible = true;
                }

                draw_map(&mut stdout, &pos, secret_room_visible, box_visible);
            }
        }
    }

    terminal::disable_raw_mode().unwrap();
}`;